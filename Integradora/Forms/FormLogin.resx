<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAADAAAACgAAABMAAAAdAAAAJQAAACcAAAAoAAAAKQAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAA
        ACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACYAAAAhAAAAGQAA
        AA8AAAAGAAAAAgAAAAkAAAAZAAAAMQAAAEkAMF62AD52+wE+d/8BPnf/AT53/wE+d/8BPnf/AT53/wE+
        d/8BPnf/AT53/wE+d/8BPnf/AT53/wE+d/8BPnf/AT53/wE+d/8BPnf/AT53/wE+d/8BPnf/AD13/QAw
        YLUAAAA+AAAAJgAAABAAAAAEAAAACAAAABYAAAArAAAAQAI/evtHhM//osPo/3+u4P8accj/AmXE/wJm
        xf8CZsX/AmbF/wJmxf8CZsX/AmbF/wJmxf8CZsX/AmbF/wJmxf8CZsX/AmbF/wNmxP8acsn/f67g/6DC
        6P9Ghc//AkF7/QAAADYAAAAhAAAADwAAAAQAAAACAAAABgAAAAwAAAATBEWA/0mO0/+ix+n/frTj/xt9
        z/8Ecsv/BHPL/wRzy/8Ec8v/BHPL/wRzy/8FdMv/BHPL/wRzy/8FdMv/BHPL/wRzy/8Ec8v/BXPL/xx+
        z/9/tOP/oMbp/0eM0v8ERYD/AAAAEAAAAAkAAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAFSYX/SpTY/6LL
        7P9/uub/HYnV/wZ/0v8HgdP/B4HT/weB0/8HgdP/B4HT/weB0/8HgdP/B4HT/weB0/8HgdP/B4HT/weB
        0/8HgNL/HorW/4C75v+hyuv/SZPX/wVJhf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdO
        i/9Mm9v/o87u/4HA6f8hlNv/CozZ/3/E6/9/xOv/f8Tr/4DF6/+Axev/gMXr/4DF6/+Axev/gMXr/4DF
        6/9/xOv/f8Tr/wuM2f8ilNv/gcDp/6LO7v9Lmdv/B06L/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAACVOR/06h4P+k0vD/g8Xt/yOe4f8NmN//DH/D/w2Aw/8NgMP/DYDD/w2Aw/8OgMT/D4DE/w+A
        xP8NgMP/DYDD/wx/w/8Mf8P/Dpjf/ySf4f+Dxe3/pNLw/0yg3/8JU5H/AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAALWJj/T6fj/6bV8/+Eyu//Jqjm/xOk5f8Upub/Fqfn/xen5/8XqOf/GKjn/xio
        5/8YqOf/GKjn/xeo5/8Xp+f/FKbm/xSm5v8TpOX/J6jm/4XL7/+l1fL/Tafj/wtYmP8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1dnv9RrOb/p9n0/4bP8f8ssOn/Ga7q/4jW9f+J1vX/itf1/4vX
        9f+M1/X/jNf1/4zX9f+L1/X/itf1/4nW9f+I1vX/h9b1/xit6f8rsen/hs/x/6XY8/9PrOb/DV2e/wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEGSl/1Ox6f+o3PX/iNPz/y+47v8dt+7/GpjQ/x6Z
        0P8fmtD/IZrQ/yOb0f8km9H/JJvR/yKb0f8gmtD/HpnQ/xuZ0P8YmND/Hbbu/y637f+J0/P/p9v1/1Gw
        6f8QZKX/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wESaaz/Vrbs/6re9v+L1/b/NcDx/ya/
        8v8rwvP/MMPz/zXF9P85xvT/O8f0/zzH9P89x/T/Osb0/zbF9P8xxPP/LcLz/yjB8/8lvvL/NL/w/4vX
        9f+o3fb/U7Tr/xJprP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////ARVus/9Yue7/q+D4/47a
        +P88xfX/L8X2/5bj+/+a5Pv/neX7/6Dm+/+i5vv/o+b7/6Pm+/+h5vv/nuX7/5vk+/+X4/v/lOL7/yzE
        9v86xPX/jdr3/6nf+P9VuO7/FG6y/////wEAAAAAAAAAAAAAAAAAAAAAAAAAAP///wH///8BGHS6/1u7
        8P+s4fn/kNv5/0LI9/83yfj/MqnY/zqr2P9ArNn/Rq7Z/0mv2f9LsNn/S7DZ/0iv2f9Crdn/PazY/zWq
        2P8uqNj/M8j4/z/H9/+P2/n/quD5/1e67/8Xc7r/////AQAAAAAAAAAAAAAAAAAAAAAAAAAA////Af//
        /wIbecD/Xbrx/6/g+f+U2vn/S8f4/0XJ+f9Pzvr/W9H6/2bU+/9v1/v/ddj7/3fZ+/932fv/ctj7/2nV
        +/9f0vv/U8/6/0jM+v8/x/n/R8X4/5Pa+f+t4Pn/Wrjw/xh4v/////8B////AQAAAAAAAAAAAAAAAAAA
        AAD///8B////Ah1/xv9it/H/s+D5/5rY+f9Vwvb/UMT4/17L+f9sz/n/edP6/4TX+v+L2fv/jtr7/43a
        +/+G1/r/fdX6/3DQ+v9jzPn/Vsj5/0rB9/9Qwfb/l9f5/7Hf+f9etfD/G37G/////wL///8BAAAAAAAA
        AAAAAAAA////Af///wH///8DH4PL3F6u6/+94fn/ntX3/1u98/9ZvvX/acX2/3jL9/+I0fj/k9b5/53Z
        +f+g2/r/oNr5/5fX+f+N0/j/fs34/2/H9/9fwvb/Urv0/1W58/+d1ff/veH5/2Gw7P8egczf////Av//
        /wEAAAAAAAAAAAAAAAD///8B////Af///wMniNJ2Q5rc/8zl+f/H5Pn/pNX3/6TV9/+u2vj/t9/5/8Hj
        +v/I5vr/zun7/9Hq+//P6vv/y+j7/8Tk+v+74Pn/sdz4/6jY+P+e0/f/odP2/8fj+f+83Pb/Ppfa/yCH
        0nf///8B////AQAAAAAAAAAAAAAAAP///wH///8C////A////wcyktSTNJHT/ziW2P9DnNv/VKXe/2au
        4f95uOX/jcPp/57M7P+p0e7/rtTv/6vT7/+izu3/k8bq/4G95/9usuP/Wqjf/0mf3P88mNn/MZLX/z2Q
        y/82ktJ3////Bf///wL///8B////AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJmZmQ+Wlpf//////6+v
        sP//////lJSV/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACUlJX//////6+v
        sP//////lpaX/5mZmQ8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJeX
        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
        AD/+AAB//wAA//+AAf//wAP///AH//////8=
</value>
  </data>
</root>